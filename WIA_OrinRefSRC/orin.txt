lsusb : Orin NX 16GB: 0955:7323 NVidia Corp

install
https://wiki.seeedstudio.com/reComputer_J4012_Flash_Jetpack/

Before we can move on to the installation steps, we need to make sure that the reComputer is in force recovery mode.

Step 1. Use a jumper wire to connect the FC REC pin and the GND pin.

Step 2. Power up the reComputer by connecting the included cable from the power adapter and connect the board with the Ubuntu host PC with a USB Type-C data transmission cable

FAN \C3Ö´\EB\B7\CE \B5\B9\B8\AE\B1\E2
https://engcang.github.io/2023/12/14/ubuntu_startup_Jetson_Fan_ROS.html


CAN (ORIN)
https://docs.nvidia.com/jetson/archives/r35.1/DeveloperGuide/text/HR/ControllerAreaNetworkCan.html


https://youtu.be/Mh5gohOowE4

jetson nano \C0\A9\B5\B5\BF\EC VNC

https://wendys.tistory.com/142 : MSTSC

https://blog.naver.com/zeta0807/223157566504 : orin nano vcn, usb cam

find . -name "*test*" -type d

sudo modprobe can
sudo modprobe can_raw
sudo modprobe mttcan
sudo ip link set can0 up type can bitrate 500000
sudo ip link set can0 up type can bitrate 500000 dbitrate 1000000 berr-reporting on fd on
sudo ip link set up can0
sudo ip link set can0 down


cansend can0 123#1122334455667788
candump can0su
=====================

cd /usr/lib/systemd/user/graphical-session.target.wants
sudo ln -s ../vino-server.service ./.
gsettings set org.gnome.Vino prompt-enabled false
gsettings set org.gnome.Vino require-encryption false
# Replace thepassword with your desired password
gsettings set org.gnome.Vino authentication-methods "['vnc']"
gsettings set org.gnome.Vino vnc-password $(echo -n 'thepassword'|base64)


#include <stdio.h>
#include <string.h>
#include <unistd.h>
#include <net/if.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <sys/ioctl.h>
#include <linux/can.h>
#include <linux/can/raw.h>

int main() {
    int s = socket(PF_CAN, SOCK_RAW, CAN_RAW); // Create socket
    struct sockaddr_can addr;
    struct ifreq ifr;
    strcpy(ifr.ifr_name, "can0" );
    ioctl(s, SIOCGIFINDEX, &ifr); // Specify can0 device
    addr.can_family = AF_CAN;
    addr.can_ifindex = ifr.ifr_ifindex;
    bind(s, (struct sockaddr *)&addr, sizeof(addr)); // Bind the socket

    struct can_frame frame;
    frame.can_id = 0x123; // CAN ID
    frame.can_dlc = 2; // Data length code
    frame.data[0] = 0x11; // Data bytes
    frame.data[1] = 0x22;

    write(s, &frame, sizeof(frame)); // Send frame

    close(s); // Close the socket
    return 0;
}
=============================================
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <net/if.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <sys/ioctl.h>
#include <linux/can.h>
#include <linux/can/raw.h>

int main() {
    int s;
    struct sockaddr_can addr;
    struct canfd_frame frame;
    struct ifreq ifr;

    // Create socket
    s = socket(PF_CAN, SOCK_RAW, CAN_RAW);
    if (s < 0) {
        perror("Socket");
        return 1;
    }

    strcpy(ifr.ifr_name, "can0");
    ioctl(s, SIOCGIFINDEX, &ifr);

    memset(&addr, 0, sizeof(addr));
    addr.can_family = AF_CAN;
    addr.can_ifindex = ifr.ifr_ifindex;

    // Enable CAN FD support
    setsockopt(s, SOL_CAN_RAW, CAN_RAW_FD_FRAMES, &ifr, sizeof(ifr));

    if (bind(s, (struct sockaddr *)&addr, sizeof(addr)) < 0) {
        perror("Bind");
        return 1;
    }

    // Prepare CAN FD frame
    frame.can_id = 0x123 | CAN_EFF_FLAG;
    frame.len = 8; // CAN FD frames can be up to 64 bytes
    frame.flags = 0; // Flags for FD frames, e.g., BRS
    strcpy((char *)frame.data, "CAN-FD");

    // Send frame
    if (write(s, &frame, sizeof(frame)) != sizeof(frame)) {
        perror("Write");
        return 1;
    }

    close(s);
    return 0;
}
======================================================================
#include <pthread.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <net/if.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <sys/ioctl.h>
#include <linux/can.h>
#include <linux/can/raw.h>

pthread_mutex_t mutex = PTHREAD_MUTEX_INITIALIZER;
pthread_cond_t cond = PTHREAD_COND_INITIALIZER;

// Global flag for clean shutdown
volatile int running = 1;

// Thread function for reading CAN-FD frames
void* can_reader_thread(void *arg) {
    int s = *((int*)arg);
    struct canfd_frame frame;

    while (running) {
        int nbytes = read(s, &frame, sizeof(struct canfd_frame));
        if (nbytes > 0) {
            pthread_mutex_lock(&mutex);
            // Process or enqueue the frame for processing
            pthread_mutex_unlock(&mutex);
            pthread_cond_signal(&cond);
        }
    }

    return NULL;
}

// Processing thread function
void* frame_processor_thread(void *arg) {
    while (running) {
        pthread_mutex_lock(&mutex);
        while (/* condition to check if there are frames to process */) {
            pthread_cond_wait(&cond, &mutex);
        }
        // Process the frame
        pthread_mutex_unlock(&mutex);
    }

    return NULL;
}

int main() {
    pthread_t reader_tid, processor_tid;

    // Initialize CAN-FD socket (s)...

    // Create reader thread
    pthread_create(&reader_tid, NULL, can_reader_thread, (void *)&s);

    // Create processing thread
    pthread_create(&processor_tid, NULL, frame_processor_thread, NULL);

    // Join threads (or perform other clean-up actions)
    pthread_join(reader_tid, NULL);
    pthread_join(processor_tid, NULL);

    // Cleanup and close sockets
    return 0;
}
===================================================================
cat /proc/device-tree/model
=>NVIDIA Jetson Orin NX Engineering Reference Developer Kit
cat /proc/device-tree/chosen/ids
==>3767-0000-300 


// unlock downloaded file
sudo chmod 777 -R ./jetson-gpio


cat /proc/device-tree/compatible
nvidia,p3768-0000+p3767-0000
nvidia,p3767-0000
nvidia,tegra234


can compile
cc -O2 -Wall -Wno-parentheses -I. -Iinclude -DAF_CAN=PF_CAN -DPF_CAN=29 -DSO_RXQ_OVFL=40 -DSCM_TIMESTAMPING_OPT_STATS=54 -DCLOCK_TAI=11 -DSO_TXTIME=61 -DSCM_TXTIME=SO_TXTIME -D_FILE_OFFSET_BITS=64 -D_GNU_SOURCE  -c -o cansend.o cansend.c
cc -O2 -Wall -Wno-parentheses -I. -Iinclude -DAF_CAN=PF_CAN -DPF_CAN=29 -DSO_RXQ_OVFL=40 -DSCM_TIMESTAMPING_OPT_STATS=54 -DCLOCK_TAI=11 -DSO_TXTIME=61 -DSCM_TXTIME=SO_TXTIME -D_FILE_OFFSET_BITS=64 -D_GNU_SOURCE  -c -o lib.o lib.c
cc   cansend.o lib.o   -o cansend














